require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LineitemsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Lineitem. As you add validations to Lineitem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:lineitem).attributes
  }

  let(:invalid_attributes) {
    {}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LineitemsController. Be sure to keep this updated too.

  describe "GET #index" do
    it "returns a success response" do
      lineitem = Lineitem.create! valid_attributes
      get :index, params: { customer_id: lineitem.order.customer_id, order_id: lineitem.order_id }
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      lineitem = Lineitem.create! valid_attributes
      get :show, params: { id: lineitem.to_param, customer_id: lineitem.order.customer_id, order_id: lineitem.order_id }
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    let(:order) { Order.find(valid_attributes["order_id"])}

    context "with valid params" do
      it "creates a new Lineitem" do
        expect {
          post :create, params: { lineitem: valid_attributes, customer_id: order.customer_id, order_id: order.id }
        }.to change(Lineitem, :count).by(1)
      end

      it "renders a JSON response with the new lineitem" do

        post :create, params: { lineitem: valid_attributes, customer_id: order.customer_id, order_id: order.id }
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new lineitem" do

        post :create, params: { lineitem: invalid_attributes, customer_id: order.customer_id, order_id: order.id }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested lineitem" do
  #       lineitem = Lineitem.create! valid_attributes
  #       put :update, params: {id: lineitem.to_param, lineitem: new_attributes}
  #       lineitem.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the lineitem" do
  #       lineitem = Lineitem.create! valid_attributes

  #       put :update, params: {id: lineitem.to_param, lineitem: valid_attributes}
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end

  #   context "with invalid params" do
  #     it "renders a JSON response with errors for the lineitem" do
  #       lineitem = Lineitem.create! valid_attributes

  #       put :update, params: {id: lineitem.to_param, lineitem: invalid_attributes}
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested lineitem" do
  #     lineitem = Lineitem.create! valid_attributes
  #     expect {
  #       delete :destroy, params: {id: lineitem.to_param}
  #     }.to change(Lineitem, :count).by(-1)
  #   end
  # end

end
